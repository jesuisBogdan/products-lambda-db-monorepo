service: serverless-logic
frameworkVersion: '3'

provider:
  name: aws
  region: us-east-1
  runtime: nodejs14.x
  profile: default
  environment:
    TABLE_PRODUCTS: products
    TABLE_STOCKS: stocks
  iam:
    role:
      name: DynamoDBfullaccessLambdasServeless
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - 'arn:aws:dynamodb:us-east-1:*:table/products'
            - 'arn:aws:dynamodb:us-east-1:*:table/stocks'
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - arn:aws:sqs:us-east-1:893149911957:catalogItemsQueue.fifo
        - Effect: Allow
          Action:
            - sns:*
          Resource:
            - arn:aws:sns:us-east-1:893149911957:emailTopic.fifo

functions:
  getProductsById:
    handler: getProductsById/index.getProductsById
    environment:
      PRODUCTS_TABLE: 'products'
      STOCKS_TABLE: 'stocks'
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          integration: lambda

  getProductsList:
    handler: getProductsList/index.getProductsList
    environment:
      PRODUCTS_TABLE: 'products'
      STOCKS_TABLE: 'stocks'
    events:
      - http:
          path: products
          method: get
          cors: true
          integration: lambda
  createProduct:
    handler: createProduct/index.createProduct
    environment:
      PRODUCTS_TABLE: 'products'
      STOCKS_TABLE: 'stocks'
    events:
      - http:
          path: products
          method: post
          cors: true
          integration: lambda

  catalogBatchProcess:
    handler: catalogBatchProcess/index.catalogBatchProcess
    environment:
      PRODUCTS_TABLE: 'products'
      STOCKS_TABLE: 'stocks'
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:893149911957:catalogItemsQueue.fifo
          batchSize: 5

resources:
  Resources:
    catalogItemsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: catalogItemsQueue

    createProductTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: 'Create Product Topic'
        TopicName: createProductTopic.fifo
        FifoTopic: true
        ContentBasedDeduplication: true

    productAttributeFilter:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !GetAtt createProductTopic.Arn
        Protocol: email
        Endpoint: bogdan_abuziloae@epam.com
        FilterPolicy: '{"price": [{"numeric": [">=", 50]}]}'

    productAttributeFilter2:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !GetAtt createProductTopic.Arn
        Protocol: email
        Endpoint: bogdan.abuziloae@gmail.com
        FilterPolicy: '{"price": [{"numeric": ["<", 50]}]}'
