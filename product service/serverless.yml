service: serverless-logic
frameworkVersion: '3'

provider:
  name: aws
  region: us-east-1
  runtime: nodejs14.x
  profile: default
  environment:
    TABLE_PRODUCTS: products
    TABLE_STOCKS: stocks
  iam:
    role:
      name: DynamoDBfullaccessLambdasServeless
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - 'arn:aws:dynamodb:us-east-1:*:table/products'
            - 'arn:aws:dynamodb:us-east-1:*:table/stocks'

functions:
  getProductsById:
    handler: getProductsById/index.getProductsById
    environment:
      PRODUCTS_TABLE: 'products'
      STOCKS_TABLE: 'stocks'
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          integration: lambda

  getProductsList:
    handler: getProductsList/index.getProductsList
    environment:
      PRODUCTS_TABLE: 'products'
      STOCKS_TABLE: 'stocks'
    events:
      - http:
          path: products
          method: get
          cors: true
          integration: lambda
  createProduct:
    handler: createProduct/index.createProduct
    environment:
      PRODUCTS_TABLE: 'products'
      STOCKS_TABLE: 'stocks'
    events:
      - http:
          path: products
          method: post
          cors: true
          integration: lambda
resources:
  Outputs:
    ServerlessDeploymentBucketName:
      Value:
        Ref: ServerlessDeploymentBucket
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
